defmodule RSVTest do
  use ExUnit.Case, async: true

  doctest RSV

  @fixture_dir Path.relative_to_cwd("../TestFiles/")

  describe "valid input" do
    setup context do
      # Get the current file name based on the test name by stripping
      # the prefix in the test name generated by ExUnit ("test valids
      # ...")
      file_name = String.replace_prefix("#{context.test}", "test #{context.describe} ", "")
      root = Path.rootname(file_name)

      with {:ok, data} <- File.read("#{root}.rsv"),
           {:ok, expectation_data} <- File.read("#{root}.json"),
           {:ok, expectation} <- Jason.decode(expectation_data) do
        {:ok, raw: data, expectation: expectation}
      end
    end

    for test_name <- Path.wildcard(Path.expand("Valid*.rsv", @fixture_dir)) do
      test test_name, context do
        # First we check if we match the expected result (from the
        # json file) if we decode the raw data
        assert context.expectation == RSV.decode!(context.raw)
        # Then we attempt to decode and then re-encode; our encoder
        # should produce the same data as the given input
        assert context.raw == context.raw |> RSV.decode!() |> RSV.encode!()
      end
    end
  end

  describe "invalid input" do
    setup context do
      # Get the current file name based on the test name by stripping
      # the prefix in the test name generated by ExUnit ("test valids
      # ...")
      file_name = String.replace_prefix("#{context.test}", "test #{context.describe} ", "")

      {:ok, raw: File.read!(file_name)}
    end

    for test_name <- Path.wildcard(Path.expand("Invalid*.rsv", @fixture_dir)) do
      test test_name, context do
        assert_raise RSV.ParseError, fn ->
          _should_raise = RSV.decode!(context.raw)
        end
      end
    end
  end
end
